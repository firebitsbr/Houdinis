#!/usr/bin/env python3
"""
Houdinis Framework - Houdinis Framework Multi-Backend Demo
Author: Mauro Risonho de Paula Assumpção aka firebitsbr
License: MIT

Houdinis - Advanced Quantum Cryptography Exploitation Framework
A professional penetration testing tool for red team operations targeting
quantum-vulnerable cryptographic implementations in virtualized environments.
"""

import sys
import argparse
import logging
from pathlib import Path

# Add src directory to Python path
sys.path.insert(0, str(Path(__file__).parent / 'src'))

from src.core.quantum_exploit import HoudiniFramework
from src.utils.logger import setup_logger
from src.utils.banner import display_banner


def parse_arguments():
    """Parse command line arguments."""
    parser = argparse.ArgumentParser(
        description="Houdinis - Quantum Cryptography Exploitation Framework",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  python quantum_exploit.py --scan --target 192.168.1.100
  python quantum_exploit.py --attack rsa --target 192.168.1.100 --key-size 1024
  python quantum_exploit.py --quantum-sim --algorithm shor --target-key rsa_key.pem
  python quantum_exploit.py --report --output /tmp/quantum_pentest_report.html
        """
    )
    
    # Target options
    parser.add_argument('--target', '-t', 
                       help='Target IP address or hostname')
    parser.add_argument('--port', '-p', type=int, default=22,
                       help='Target port (default: 22)')
    parser.add_argument('--target-list', 
                       help='File containing list of targets')
    
    # Operation modes
    parser.add_argument('--scan', action='store_true',
                       help='Perform quantum vulnerability scan')
    parser.add_argument('--attack', choices=['rsa', 'ecc', 'dh', 'ecdh'],
                       help='Launch specific quantum attack')
    parser.add_argument('--quantum-sim', action='store_true',
                       help='Run quantum algorithm simulation')
    
    # Quantum-specific options
    parser.add_argument('--algorithm', choices=['shor', 'grover', 'vqe'],
                       help='Quantum algorithm to simulate')
    parser.add_argument('--key-size', type=int, default=1024,
                       help='Target key size in bits')
    parser.add_argument('--qubits', type=int, default=8,
                       help='Number of qubits for simulation')
    
    # Input/Output options
    parser.add_argument('--target-key', 
                       help='Path to target public key file')
    parser.add_argument('--wordlist',
                       help='Custom wordlist for attacks')
    parser.add_argument('--output', '-o',
                       help='Output file for results')
    parser.add_argument('--report', action='store_true',
                       help='Generate detailed penetration test report')
    
    # Advanced options
    parser.add_argument('--threads', type=int, default=10,
                       help='Number of threads for parallel operations')
    parser.add_argument('--timeout', type=int, default=30,
                       help='Connection timeout in seconds')
    parser.add_argument('--stealth', action='store_true',
                       help='Enable stealth mode (slower but less detectable)')
    
    # Logging and debug
    parser.add_argument('--verbose', '-v', action='count', default=0,
                       help='Increase verbosity level')
    parser.add_argument('--log-file',
                       help='Log file path')
    parser.add_argument('--no-banner', action='store_true',
                       help='Suppress banner display')
    
    return parser.parse_args()


def main():
    """Main entry point for Houdinis framework."""
    args = parse_arguments()
    
    # Setup logging
    log_level = logging.WARNING
    if args.verbose == 1:
        log_level = logging.INFO
    elif args.verbose >= 2:
        log_level = logging.DEBUG
    
    logger = setup_logger(log_level, args.log_file)
    
    # Display banner
    if not args.no_banner:
        display_banner()
    
    try:
        # Initialize the framework
        framework = HoudiniFramework(
            threads=args.threads,
            timeout=args.timeout,
            stealth_mode=args.stealth
        )
        
        # Execute based on operation mode
        if args.scan:
            if not args.target and not args.target_list:
                logger.error("Target required for scanning operation")
                sys.exit(1)
            
            targets = []
            if args.target:
                targets.append(args.target)
            if args.target_list:
                with open(args.target_list, 'r') as f:
                    targets.extend([line.strip() for line in f if line.strip()])
            
            results = framework.scan_targets(targets, args.port)
            
        elif args.attack:
            if not args.target:
                logger.error("Target required for attack operation")
                sys.exit(1)
            
            results = framework.launch_attack(
                attack_type=args.attack,
                target=args.target,
                port=args.port,
                key_size=args.key_size,
                target_key=args.target_key
            )
            
        elif args.quantum_sim:
            if not args.algorithm:
                logger.error("Quantum algorithm required for simulation")
                sys.exit(1)
            
            results = framework.run_quantum_simulation(
                algorithm=args.algorithm,
                qubits=args.qubits,
                target_key=args.target_key
            )
            
        elif args.report:
            results = framework.generate_report(args.output)
            
        else:
            logger.error("No operation mode specified. Use --help for usage.")
            sys.exit(1)
        
        # Output results
        if args.output:
            framework.save_results(results, args.output)
        else:
            framework.display_results(results)
            
    except KeyboardInterrupt:
        logger.info("Operation interrupted by user")
        sys.exit(130)
    except Exception as e:
        logger.error(f"Critical error: {e}")
        if args.verbose >= 2:
            import traceback
            traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()
